const express = require("express");
const router = express.Router();
const axios = require("axios");

// Function to check for SQL Injection patterns
const checkForSqlInjection = (url) => {
  const sqlInjectionPatterns = [
    /('|--|\/\*|\*\/|;|OR|AND|SELECT|INSERT|DELETE|UPDATE|DROP|EXEC|UNION)/i,
  ];
  return sqlInjectionPatterns.some((pattern) => pattern.test(url));
};

// Function to check for XSS patterns
const checkForXSS = (url) => {
  const xssPatterns = [
    /<script.*?>/i,
    /javascript:/i,
    /on\w*=/i,
    /alert\(/i,
    /<img.*?src=.*?onerror=.*?>/i,
    /<iframe.*?>/i,
  ];
  return xssPatterns.some((pattern) => pattern.test(url));
};

// Function to check for Command Injection patterns
const checkForCommandInjection = (url) => {
  const commandInjectionPatterns = [/\|/g, /&/g, /`/g, /\$[a-zA-Z0-9_]+/g];
  return commandInjectionPatterns.some((pattern) => pattern.test(url));
};

// Function to check for Directory Traversal patterns
const checkForDirectoryTraversal = (url) => {
  const dirTraversalPatterns = [
    /\.\.\//g,
    /\/etc\/passwd/i,
    /\/proc\/self\/environ/i,
  ];
  return dirTraversalPatterns.some((pattern) => pattern.test(url));
};

// Function to check for Open Redirect patterns
const checkForOpenRedirect = (url) => {
  const openRedirectPatterns = [
    /http[s]?:\/\/[^\s]+/g, // Matches any URL
  ];
  return openRedirectPatterns.some((pattern) => pattern.test(url));
};

// Function to check for Sensitive Data Exposure
const checkForSensitiveDataExposure = (url) => {
  const sensitiveDataPatterns = [
    /password/i,
    /secret/i,
    /token/i,
    /apikey/i,
    /key/i,
  ];
  return sensitiveDataPatterns.some((pattern) => pattern.test(url));
};

// Function to check for CSRF (Cross-Site Request Forgery)
const checkForCSRF = async (url) => {
  try {
    const response = await axios.get(url, { validateStatus: false });
    return response.headers["csrf-token"] ? false : true; // Check if CSRF token is present
  } catch (error) {
    return false;
  }
};

// Function to check for HTTP Security Headers
const checkForHttpSecurityHeaders = (url) => {
  const insecureHeaders = [/X-Powered-By/i, /Server/i];
  return insecureHeaders.some((pattern) => pattern.test(url));
};

// Dummy vulnerability test endpoint
router.post("/test", async (req, res) => {
  const { url } = req.body;

  const vulnerabilities = [];

  // Check for various vulnerabilities
  if (checkForSqlInjection(url)) {
    vulnerabilities.push({
      type: "SQL Injection",
      risk: "High",
      description: "Potential SQL Injection vulnerability detected.",
    });
  }
  if (checkForXSS(url)) {
    vulnerabilities.push({
      type: "XSS",
      risk: "Medium",
      description: "Cross-Site Scripting vulnerability detected.",
    });
  }
  if (checkForCommandInjection(url)) {
    vulnerabilities.push({
      type: "Command Injection",
      risk: "High",
      description: "Potential Command Injection vulnerability detected.",
    });
  }
  if (checkForDirectoryTraversal(url)) {
    vulnerabilities.push({
      type: "Directory Traversal",
      risk: "High",
      description: "Directory Traversal vulnerability detected.",
    });
  }
  if (checkForOpenRedirect(url)) {
    vulnerabilities.push({
      type: "Open Redirect",
      risk: "Medium",
      description: "Open Redirect vulnerability detected.",
    });
  }
  if (checkForSensitiveDataExposure(url)) {
    vulnerabilities.push({
      type: "Sensitive Data Exposure",
      risk: "High",
      description: "Sensitive data exposure detected.",
    });
  }
  const csrfVulnerability = await checkForCSRF(url);
  if (csrfVulnerability) {
    vulnerabilities.push({
      type: "CSRF",
      risk: "High",
      description: "CSRF vulnerability detected due to missing CSRF token.",
    });
  }
  if (checkForHttpSecurityHeaders(url)) {
    vulnerabilities.push({
      type: "Insecure HTTP Headers",
      risk: "Medium",
      description: "Insecure HTTP headers detected.",
    });
  }

  // If no vulnerabilities found
  if (vulnerabilities.length === 0) {
    vulnerabilities.push({
      type: "None",
      risk: "Low",
      description: "No vulnerabilities detected.",
    });
  }

  const results = {
    url,
    vulnerabilities,
    totalVulnerabilities: vulnerabilities.length,
    highRiskCount: vulnerabilities.filter((v) => v.risk === "High").length,
    mediumRiskCount: vulnerabilities.filter((v) => v.risk === "Medium").length,
    lowRiskCount: vulnerabilities.filter((v) => v.risk === "Low").length,
  };

  res.json(results);
});

module.exports = router;
