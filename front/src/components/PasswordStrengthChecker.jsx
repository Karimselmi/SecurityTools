import React, { useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import md5 from "md5";
import "jspdf-autotable";

const PasswordStrengthChecker = () => {
  const [password, setPassword] = useState("");
  const [strength, setStrength] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);
  const [generatedPassword, setGeneratedPassword] = useState("");
  const [hashedPassword, setHashedPassword] = useState("");

  const checkPasswordStrength = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "http://localhost:5000/api/password/check",
        { password }
      );
      setStrength(response.data);
    } catch (error) {
      console.error("Error checking password strength", error);
    }
  };

  // Simple password strength evaluation function
  const evaluateStrength = (pwd) => {
    if (
      pwd.length >= 12 &&
      /[A-Z]/.test(pwd) &&
      /[a-z]/.test(pwd) &&
      /\d/.test(pwd) &&
      /[@$!%*?&#]/.test(pwd)
    ) {
      return {
        score: "Strong",
        percentage: 80,
        color: "green",
        bgColor: "bg-green-600",
        textColor: "text-green-500",
      };
    } else if (
      pwd.length >= 8 &&
      (/[A-Z]/.test(pwd) || /[a-z]/.test(pwd)) &&
      /\d/.test(pwd)
    ) {
      return {
        score: "Medium",
        percentage: 50,
        color: "yellow",
        bgColor: "bg-yellow-600",
        textColor: "text-yellow-500",
      };
    } else if (pwd.length > 0) {
      return {
        score: "Weak",
        percentage: 20,
        color: "red",
        bgColor: "bg-red-600",
        textColor: "text-red-500",
      };
    } else {
      return { score: null, percentage: 0 };
    }
  };

  const toggleShowPassword = () => setShowPassword(!showPassword);

  const handlePasswordChange = (e) => {
    const newPassword = e.target.value;
    setPassword(newPassword);
    setStrength(evaluateStrength(newPassword));
  };

  const generatePDF = () => {
    const doc = new jsPDF();

    // Title
    doc.setFontSize(22);
    doc.setTextColor(40);
    doc.text("Password Strength Analysis Report", 20, 20);

    // Summary Section
    doc.setFontSize(16);
    doc.setTextColor(60);
    doc.text("Summary", 20, 40);
    const summaryText = `
      This report provides a detailed analysis of the entered password.
      Based on its length, complexity, and character types, the password
      has been evaluated as ${strength.score}. The following sections 
      provide insights into the strength score, crack time, and feedback 
      on how to improve the password.
    `;
    doc.setFontSize(12);
    doc.setTextColor(80);
    doc.text(summaryText, 20, 50, { maxWidth: 170 });

    // Table: Password Statistics
    doc.setFontSize(16);
    doc.text("Password Statistics", 20, 90);

    doc.autoTable({
      startY: 100,
      head: [["Criteria", "Details"]],
      body: [
        ["Score", strength.score],
        [
          "Crack Time",
          strength.crack_times_display?.offline_slow_hashing_1e4_per_second ||
            "Unknown",
        ],
        ["Suggestions", strength.feedback?.suggestions.join(", ") || "None"],
      ],
    });

    // Add any other custom content, illustrations, or logos
    doc.setFontSize(16);
    doc.text("Additional Statistics", 20, doc.lastAutoTable.finalY + 20);

    // Another table for extended statistics
    doc.autoTable({
      startY: doc.lastAutoTable.finalY + 30,
      head: [["Aspect", "Value"]],
      body: [
        ["Password Length", password.length],
        ["Uppercase Characters", /[A-Z]/.test(password) ? "Yes" : "No"],
        ["Lowercase Characters", /[a-z]/.test(password) ? "Yes" : "No"],
        ["Numeric Characters", /\d/.test(password) ? "Yes" : "No"],
        ["Special Characters", /[@$!%*?&#]/.test(password) ? "Yes" : "No"],
      ],
    });

    // Footer
    doc.setFontSize(12);
    doc.text("Report generated by Password Strength Checker", 20, 280);
    doc.text("Generated on: " + new Date().toLocaleString(), 20, 290);

    // Save the PDF
    doc.save("password_strength_analysis_report.pdf");
  };

  const toggleAdvancedSettings = () => setIsAdvancedOpen(!isAdvancedOpen);

  const generatePassword = () => {
    const chars =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@$!%*?&#";
    let newPassword = "";
    for (let i = 0; i < 12; i++) {
      newPassword += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    setGeneratedPassword(newPassword);
  };

  const hashPassword = () => {
    setHashedPassword(md5(generatedPassword));
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-gradient-to-r from-purple-500 to-indigo-500 p-6">
      <div className="w-full max-w-lg bg-white p-10 rounded-lg shadow-lg">
        <h1 className="text-4xl font-bold text-center text-purple-700 mb-6">
          Advanced Password Strength Checker
        </h1>
        <form onSubmit={checkPasswordStrength} className="space-y-4">
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={handlePasswordChange}
              placeholder="Enter your password"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-purple-500 transition"
            />
            <span
              onClick={toggleShowPassword}
              className="absolute inset-y-0 right-3 flex items-center cursor-pointer"
            >
              {showPassword ? <FaEyeSlash /> : <FaEye />}
            </span>
          </div>

          {/* Password strength indicator below the input */}
          {strength && (
            <div className="mt-4">
              <span className={`${strength.textColor} font-bold`}>
                {strength.score}
              </span>
              <div className="w-full h-2 bg-gray-300 rounded-full mt-1">
                <div
                  className={`${strength.bgColor} h-full rounded-full`}
                  style={{ width: `${strength.percentage}%` }}
                ></div>
              </div>
            </div>
          )}

          <button
            type="submit"
            className="w-full bg-purple-600 text-white py-3 rounded-lg font-medium hover:bg-purple-700 transition-colors"
          >
            Check Strength
          </button>
        </form>

        {strength && (
          <div
            id="password-report"
            className="mt-6 p-6 bg-gray-100 border border-gray-300 rounded-lg shadow-lg"
          >
            <h2 className="text-xl font-bold text-purple-600 mb-2">
              Password Strength Report
            </h2>
            <p className="text-gray-800">
              <strong>Score:</strong> {strength.score}
            </p>
            <p className="text-gray-800">
              <strong>Feedback:</strong>{" "}
              {strength.feedback?.suggestions?.join(", ") || "None"}
            </p>
            <p className="text-gray-800">
              <strong>Crack Time:</strong>{" "}
              {
                strength.crack_times_display
                  ?.offline_slow_hashing_1e4_per_second
              }
            </p>

            <button
              onClick={generatePDF}
              className="mt-4 w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 transition-colors"
            >
              Download PDF Report
            </button>
          </div>
        )}

        {/* Advanced Settings Section */}
        <div className="mt-4">
          <button
            onClick={toggleAdvancedSettings}
            className="w-full bg-gray-800 text-white py-3 rounded-lg font-medium hover:bg-gray-900 transition-colors"
          >
            {isAdvancedOpen ? "Close Advanced Settings" : "Advanced Settings"}
          </button>

          {isAdvancedOpen && (
            <div className="mt-4 p-4 bg-gray-50 border border-gray-300 rounded-lg shadow-lg">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                Generate a Strong Password
              </h3>
              <div className="flex space-x-2 mb-4">
                <input
                  type="text"
                  value={generatedPassword}
                  readOnly
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-purple-500 transition"
                />
                <button
                  onClick={generatePassword}
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition"
                >
                  Generate
                </button>
                <button
                  onClick={() => copyToClipboard(generatedPassword)}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition"
                >
                  Copy
                </button>
              </div>
              <button
                onClick={hashPassword}
                className="w-full bg-gray-800 text-white py-3 rounded-lg font-medium hover:bg-gray-900 transition-colors"
              >
                Hash with MD5
              </button>
              {hashedPassword && (
                <p className="mt-2 text-gray-700 font-mono">Hashed Password:</p>
              )}
              <br />
              <p>{hashedPassword}</p>
              <br />
              <button
                onClick={() => copyToClipboard(hashedPassword)}
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition"
              >
                Copy
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PasswordStrengthChecker;
