import React, { useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const VulnerabilityTesting = () => {
  const [url, setUrl] = useState("");
  const [results, setResults] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");

  const checkVulnerabilities = async (e) => {
    e.preventDefault();
    setErrorMessage("");
    try {
      const response = await axios.post(
        "http://localhost:5000/api/vulnerability/test",
        { url }
      );
      if (response.data && Array.isArray(response.data.vulnerabilities)) {
        setResults(response.data);
      } else {
        throw new Error("Invalid response format");
      }
    } catch (error) {
      console.error("Error checking vulnerabilities", error);
      setErrorMessage("Failed to check vulnerabilities. Please try again.");
      setResults([]);
    }
  };

  const downloadReport = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("Vulnerability Report", 20, 20);
    doc.setFontSize(12);

    // General information
    doc.text(`URL Tested: ${results.url}`, 20, 30);
    doc.text(`Total Vulnerabilities: ${results.totalVulnerabilities}`, 20, 40);
    doc.text(`High Risk: ${results.highRiskCount}`, 20, 50);
    doc.text(`Medium Risk: ${results.mediumRiskCount}`, 20, 60);
    doc.text(`Low Risk: ${results.lowRiskCount}`, 20, 70);

    // Create a table for vulnerabilities
    const tableData = results.vulnerabilities.map((vulnerability) => [
      vulnerability.type,
      vulnerability.risk,
      vulnerability.description,
    ]);

    autoTable(doc, {
      head: [["Vulnerability", "Severity", "Description"]],
      body: tableData,
      startY: 80,
      styles: { cellWidth: "wrap" },
    });

    // Add potential fixes section
    doc.setFontSize(14);
    doc.text("Potential Fixes:", 20, doc.lastAutoTable.finalY + 10);
    doc.setFontSize(12);
    results.vulnerabilities.forEach((vulnerability) => {
      doc.text(
        `- ${vulnerability.type}: ${getPotentialFix(vulnerability.type)}`,
        20,
        doc.lastAutoTable.finalY + 20
      );
    });

    doc.save("vulnerability_report.pdf");
  };

  const getPotentialFix = (type) => {
    switch (type) {
      case "SQL Injection":
        return "Use parameterized queries to avoid SQL injection.";
        <br />;
      case "XSS":
        return "Sanitize user inputs and use Content Security Policy (CSP).";
        <br />;
      case "Command Injection":
        return "Validate and sanitize inputs, and avoid shell commands.";
        <br />;
      case "Directory Traversal":
        return "Validate user input to restrict directory access.";
        <br />;
      case "Open Redirect":
        return "Avoid redirecting users to external URLs.";
        <br />;
      case "Sensitive Data Exposure":
        return "Ensure sensitive data is encrypted.";
        <br />;
      case "CSRF":
        return "Implement CSRF tokens to protect against CSRF attacks.";
        <br />;
      case "Insecure HTTP Headers":
        return "Remove or configure insecure headers.";
        <br />;
      default:
        return "No specific fix available.";
    }
  };

  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-gradient-to-r from-green-500 to-blue-500 p-4">
      <div className="w-full max-w-2xl bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold text-center text-green-700 mb-6">
          Vulnerability Testing
        </h1>
        <form onSubmit={checkVulnerabilities}>
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter the URL to test"
            className="w-full px-4 py-2 border border-gray-300 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-green-500"
          />
          <button
            type="submit"
            className="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition-colors"
          >
            Check Vulnerabilities
          </button>
        </form>

        {errorMessage && (
          <div className="mt-4 text-red-600 text-center">{errorMessage}</div>
        )}

        {results.vulnerabilities && results.vulnerabilities.length > 0 && (
          <div className="mt-6 p-4 border rounded-md shadow-md bg-gray-50">
            <h2 className="text-lg font-medium text-green-600">Scan Results</h2>
            <table className="min-w-full mt-4 border-collapse border border-gray-300">
              <thead>
                <tr>
                  <th className="border border-gray-300 p-2 text-left bg-green-200">
                    Vulnerability
                  </th>
                  <th className="border border-gray-300 p-2 text-left bg-green-200">
                    Severity
                  </th>
                  <th className="border border-gray-300 p-2 text-left bg-green-200">
                    Description
                  </th>
                </tr>
              </thead>
              <tbody>
                {results.vulnerabilities.map((vulnerability, index) => (
                  <tr
                    key={index}
                    className={`border border-gray-300 ${
                      vulnerability.risk === "High"
                        ? "bg-red-100"
                        : "bg-yellow-100"
                    }`}
                  >
                    <td className="border border-gray-300 p-2">
                      {vulnerability.type}
                    </td>
                    <td className="border border-gray-300 p-2 text-center">
                      {vulnerability.risk}
                    </td>
                    <td className="border border-gray-300 p-2">
                      {vulnerability.description}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            <button
              onClick={downloadReport}
              className="mt-4 w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Download Report
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityTesting;
